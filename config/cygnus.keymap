/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&mt {
    tapping-term-ms = <160>;
    flavor = "tap-preferred";
};

&sk {
    release-after-ms = <2000>;
    quick-release;
};

/ {
    combos {
        compatible = "zmk,combos";

        left_bkt {
            bindings = <&kp LBKT>;
            key-positions = <3 2>;
            timeout-ms = <50>;
        };

        right_bkt {
            bindings = <&kp RBKT>;
            key-positions = <6 7>;
            timeout-ms = <50>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <12 13>;
            timeout-ms = <50>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <16 17>;
            timeout-ms = <50>;
        };

        esc {
            bindings = <&kp ESC>;
            key-positions = <0 1>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <10 11>;
        };
    };

    behaviors {
        tab_esc_ctrl: tab_esc_ctrl {
            compatible = "zmk,behavior-tap-dance";
            label = "TAB_ESC_CTRL";
            #binding-cells = <0>;
            bindings = <&mt LCTRL ESC>, <&kp TAB>;
        };

        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            quick-tap-ms = <200>;
            tapping-term-ms = <250>;
            global-quick-tap;
        };

        ltq: ltq {
            compatible = "zmk,behavior-hold-tap";
            label = "LTQ";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            global-quick-tap;
            quick-tap-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q        &kp W           &kp E           &kp R        &kp T             &kp Y              &kp U            &kp I            &kp O        &kp P
&mt LCTRL A  &mt LEFT_WIN S  &mt LEFT_ALT D  &lt 5 F      &mt LEFT_SHIFT G  &mt RIGHT_SHIFT H  &mt RIGHT_ALT J  &mt RIGHT_WIN K  &mt RCTRL L  &lt 1 ENTER
&kp Z        &kp X           &kp C           &kp V        &kp B             &kp N              &kp M            &kp COMMA        &kp PERIOD   &kp QUESTION
                             &kp LEFT_WIN    &lt 2 ENTER  &lt 1 SPACE       &lt 3 BACKSPACE    &lt 4 SPACE      &kp UP_ARROW
            >;
        };

        lower_layer {
            bindings = <
&kp N2    &kp NUMBER_3  &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp N7        &kp N8        &kp N9        &kp N0         &kp MINUS
&kp LEFT  &kp DOWN      &kp RIGHT     &kp UP_ARROW  &kp PG_DN     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp SEMICOLON  &kp SQT
&kp HOME  &kp DEL       &kp END       &kp PG_DN     &kp GRAVE     &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp BACKSLASH  &kp SLASH
                        &none         &none         &none         &kp N0        &kp PERIOD    &kp EQUAL
            >;
        };

        raise_layer {
            bindings = <
&kp AT_SIGN   &kp HASH        &kp DOLLAR     &kp PERCENT       &kp CARET      &kp AMPERSAND          &kp ASTERISK      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE
&kp LS(LEFT)  &kp LS(DOWN)    &kp LS(RIGHT)  &kp LS(UP_ARROW)  &kp LS(PG_DN)  &kp DOLLAR             &kp PERCENT       &kp CARET             &kp COLON              &kp DOUBLE_QUOTES
&kp LS(HOME)  &kp LS(DELETE)  &kp LS(END)    &kp LS(PG_DN)     &kp TILDE      &kp EXCLAMATION        &kp AT_SIGN       &kp POUND             &kp PIPE               &kp QUESTION
                              &none          &kp LESS_THAN     &none          &kp RIGHT_PARENTHESIS  &kp GREATER_THAN  &kp PLUS
            >;
        };

        adjust_layer {
            bindings = <
&mkp LCLK  &mkp MCLK  &mkp RCLK  &none  &none  &kp LC(LA(D))     &kp LC(LA(DOWN))   &kp LC(LA(UP))   &none  &none
&none      &none      &none      &none  &none  &kp C_MUTE        &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &none  &none
&none      &none      &none      &none  &none  &kp C_PLAY_PAUSE  &kp C_PREVIOUS     &kp C_NEXT       &none  &none
                      &none      &none  &none  &none             &none              &none
            >;
        };

        layer_4 {
            bindings = <
&bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &bootloader  &none  &none  &none  &kp C_SLEEP
&bt BT_CLR    &none         &none         &none         &none         &none        &none  &none  &none  &none
&none         &none         &none         &none         &none         &none        &none  &none  &none  &none
                            &none         &none         &none         &none        &none  &none
            >;
        };

        layer_5 {
            bindings = <
&none      &kp LC(UP_ARROW)  &none  &none  &none  &kp F7  &kp F8  &kp F9  &kp F10  &kp F11
&kp LC(A)  &kp LC(DOWN)      &none  &none  &none  &kp F4  &kp F5  &kp F6  &none    &kp F12
&kp LC(Z)  &none             &none  &none  &none  &kp F1  &kp F2  &kp F3  &none    &none
                             &none  &none  &none  &none   &none   &none
            >;
        };
    };
};
};
